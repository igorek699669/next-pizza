generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id         Int      @id @default(autoincrement())
  fullName   String
  email      String   @unique
  password   String
  role       UserRole @default(USER)
  provider   String?
  providerId String?

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  Order            Order[]
  verificationCode VerificationCode?
  cart             Cart?
  cartId           Int?
  verified         DateTime
}

model Product {
  id         Int      @id @default(autoincrement())
  name       String
  imageUrl   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  ingridients Ingridient[]
  items       ProductItem[]

  cart   Cart? @relation(fields: [cartId], references: [id])
  cartId Int?
}

model ProductItem {
  id        Int  @id @default(autoincrement())
  price     Int
  size      Int?
  pizzaType Int?

  product   Product    @relation(fields: [productId], references: [id])
  productId Int
  cartItem  CartItem[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Ingridient {
  id         Int       @id @default(autoincrement())
  name       String
  price      Int
  imageUrl   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  products   Product[]
  cartItem   CartItem? @relation(fields: [cartItemId], references: [id])
  cartItemId Int?
}

model Cart {
  id          Int        @id @default(autoincrement())
  user        User?      @relation(fields: [userId], references: [id])
  userId      Int?       @unique
  totalAmount Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  token       String?
  product     Product[]
  cartItem    CartItem[]
  order       Order[]
}

model CartItem {
  id            Int         @id @default(autoincrement())
  productItem   ProductItem @relation(fields: [productItemId], references: [id])
  productItemId Int

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int

  quantity Int @default(1)

  ingredients Ingridient[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Order {
  id          Int         @id @default(autoincrement())
  user        User?       @relation(fields: [userId], references: [id])
  userId      Int
  token       String?
  totalAmount Int
  status      OrderStatus
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Cart        Cart?       @relation(fields: [cartId], references: [id])
  cartId      Int?
  paymentId   String?

  items Json

  fullName String
  address  String
  email    String
  phone    String
  comment  String
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  code      String   @unique
  createdAt DateTime @default(now())

  @@unique([userId, code])
}

enum UserRole {
  USER
  ADMIN
}
