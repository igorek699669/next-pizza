import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import { updateUserInfo } from "@/app/actions/actions";
import toast from "react-hot-toast";
import { User } from "@prisma/client";
import { ProfileForm } from "./profile-form";

// –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–µ
jest.mock("@/app/actions/actions");
jest.mock("react-hot-toast");

const mockUser: User = {
  id: 1,
  email: "test@example.com",
  fullName: "Test User",
  password: "",
  role: "USER",
  provider: null,
  providerId: null,
  createdAt: new Date(),
  updatedAt: new Date(),
  cartId: null,
  verified: null,
};

describe("ProfileForm", () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it("–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", async () => {
    (updateUserInfo as jest.Mock).mockResolvedValueOnce({});

    render(<ProfileForm data={mockUser} />);

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫—É
    const emailInput = screen.getByLabelText(/e-mail/i);
    const fullNameInput = screen.getByLabelText(/–ø–æ–ª–Ω–æ–µ –∏–º—è/i);
    const passwordInput = screen.getByLabelText(/–Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å/i);
    const confirmPasswordInput = screen.getByLabelText(/–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å/i);
    const submitButton = screen.getByRole("button", { name: /—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å/i });

    // –í–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–ª—è
    fireEvent.change(emailInput, { target: { value: "newemail@example.com" } });
    fireEvent.change(fullNameInput, { target: { value: "New User" } });
    fireEvent.change(passwordInput, { target: { value: "newpassword" } });
    fireEvent.change(confirmPasswordInput, {
      target: { value: "newpassword" },
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
    fireEvent.click(submitButton);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
    await waitFor(() => {
      expect(updateUserInfo).toHaveBeenCalledWith({
        email: "newemail@example.com",
        fullName: "New User",
        password: "newpassword",
      });
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∫–∞–∑–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    expect(toast.error).toHaveBeenCalledWith("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã üìù", {
      icon: "‚úÖ",
    });
  });

  it("–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", async () => {
    (updateUserInfo as jest.Mock).mockRejectedValueOnce(new Error("–û—à–∏–±–∫–∞"));

    render(<ProfileForm data={mockUser} />);

    const emailInput = screen.getByLabelText(/e-mail/i);
    const fullNameInput = screen.getByLabelText(/–ø–æ–ª–Ω–æ–µ –∏–º—è/i);
    const passwordInput = screen.getByLabelText(/–Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å/i);
    const confirmPasswordInput = screen.getByLabelText(/–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å/i);
    const submitButton = screen.getByRole("button", { name: /—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å/i });

    fireEvent.change(emailInput, { target: { value: "newemail@example.com" } });
    fireEvent.change(fullNameInput, { target: { value: "New User" } });
    fireEvent.change(passwordInput, { target: { value: "newpassword" } });
    fireEvent.change(confirmPasswordInput, {
      target: { value: "newpassword" },
    });

    fireEvent.click(submitButton);

    await waitFor(() => {
      expect(toast.error).toHaveBeenCalledWith("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", {
        icon: "‚ùå",
      });
    });
  });
});
